; Generated by JITX 3.0.0
#use-added-syntax(jitx)
defpackage keyboard/main :
  import core
  import jitx
  import jitx/commands
  import ocdb/utils/generic-components
  import keyboard/helpers
  import keyboard/keyboard-generator
  import ocdb/utils/bundles

; Define the shape/size of the board
val board-shape = RoundedRectangle(300.0, 100.0, 5.0)

pcb-module low-profile :
  pin r
  pin c
  inst sw  : database-part(["mpn" => "CPG135001D03", "manufacturer" => "Kailh"])
  inst d : database-part(["mpn" => "1N4148WS", "manufacturer" => "ON Semiconductor"])
  net (sw.p[1], d.A)
  net (sw.p[2] r)
  net (d.C c)

  place(sw) at loc(0.0, 0.0) on Top
  place(d) at loc(3.5, 7.5, 0.0) on Bottom

; Module to run as a design
pcb-module my-design :

  inst keys : keyboard-from-kle("keyboard/layouts/ai-coder.json", button = low-profile)
  inst mcu : ocdb/components/nordic/nRF52840/module(include-LFO? = false, include-antenna? = false, power-config = 5)

  for i in indices(keys.r) do :
    require r:gpio from mcu.mcu
    net (keys.r[i] r.gpio)
  for i in indices(keys.c) do :
    require c:gpio from mcu.mcu
    net (keys.c[i] c.gpio)


setup-design(
  "ai-keyboard",
  ocdb/utils/defaults/default-board(ocdb/manufacturers/stackups/jlcpcb-jlc2313, board-shape)
  rules = ocdb/manufacturers/rules/jlcpcb-basic-rules
  vendors = [JLCPCB]
)

; Set the schematic sheet size
set-paper(ANSI-A)

; Set the top level module (the module to be compile into a schematic and PCB)
set-main-module(my-design)

; Use any helper function from helpers.stanza here
; run-check-on-design(my-design)

; View the results
view-board()
view-schematic()
view-design-explorer()
view-bom(BOM-STD)
