; ====================
; A USB-C cable tester
; ====================

; declare our package name and import dependencies
#use-added-syntax(jitx)
defpackage main : 
  import core
  import collections
  import jitx
  import jitx/commands
  import utils/time
  import ocdb/utils/checks
  import ocdb/utils/generic-components
  import ocdb/utils/box-symbol
  import ocdb/utils/generator-utils
  import helpers
  import ocdb/components/q-n-j/CR2032-BS-6-1
  import ocdb/utils/property-structs

; get the location of a pad
defn get-pad-pose (obj:JITXObject, pad-ref:VarRef|IndexRef) : 
  get-pad-pose(obj, pad-ref, false) 

defn get-pad-pose (obj:JITXObject, pad-ref:VarRef|IndexRef, pad-num:Int|False) -> Pose: 
  val landpattern-pads = pads( landpattern(instance-definition(obj)) )
  match(pad-num) :
    (pad-num:Int) :
      pose(find!({ref(_) == Ref(pad-ref)[pad-num]}, landpattern-pads))
    (pad-num:False) :
      pose(find!({ref(_) == pad-ref}, landpattern-pads))

; return a list of colors of the rainbow, sliding smoothly through color space
defn generate-rainbow (num-colors:Int) -> Seq:
  val colors:Tuple<String> = [ "red", "orange", "yellow", "green", "blue", "indigo", "violet" ]
  val generated-colors = 
    for i in 0 to num-colors seq :
      colors[i % length(colors)]
  generated-colors

; get a list of pins, ordered by their physical location
defstruct PinPos :
  x-loc: Double
  y-loc: Double
  my-pin: JITXObject

defn get-pins-physically-ordered (comp:JITXObject) -> Tuple<JITXObject> :
  ; get all of the pins in the components
  val pins-list = pins(comp)
  ; order the pins based on pad position
  val sorted-pin-pos = qsort{x-loc, _} $
    ; get a map of pins to pad locations
    for my-pin in pins-list seq :
      val pad-pos = center(get-pad-pose(comp, property(my-pin.pads)[0]))
      PinPos(x(pad-pos), y(pad-pos), my-pin)
  ; extract just the pins from the sorted list
  val sorted-pins = 
    for pin-pos in sorted-pin-pos seq : 
      my-pin(pin-pos)
  to-tuple(sorted-pins)
 
; place a testpad
defn testpad-strap (tp:JITXObject, tp-name:String, diameter:Double) -> JITXObject:
  inside pcb-module :
    public inst tp-pad : gen-testpad(diameter)
    net (tp-pad.p tp)
    ; name the test point
    value-label(tp-pad) = Text(tp-name, 1.0, W, loc(1.5, 0.0))
    reference-designator(tp-pad) = tp-name
    tp-pad

; generate a test LED
pcb-module generate-test-led (net-name:String, color:String) :
  pin in
  pin out

  net IN (in)
  ; generate LED
  public inst status-led : gen-led-cmp(color, "0402")
  ; generate ballast resistor
  public inst ballast-res : gen-res-cmp(1.0e3, "0402")
  ; add a testpoint for this pin
  val test-pad = testpad-strap(IN, net-name, 2.0)
  ; hook up LEDs, resistors to input and output
  net (ballast-res.p[2] status-led.a) ; connect cathode of resistor to anode of LED
  net (in ballast-res.p[1]) ; input power
  net (out status-led.c) ; GND     
  self

; take a Tuple of pins we want to add status LEDs to, and the GND pin. Add status LEDs and test pins to each of the input pins.
defn generate-test-leds-array (in-pins:Tuple<JITXObject>, gnd-pin:JITXObject) :
  inside pcb-module :
    val colors:Seq<String> = generate-rainbow(length(in-pins))
    for (in-pin in in-pins, color in colors, place in 0 to false) do :
      ; create test LED and connect it
      inst test-led : generate-test-led(to-string(ref(in-pin)), color)
      net (in-pin test-led.in)
      net (gnd-pin test-led.out)
      ; place components
      val x-module-height = 1.6
      val start-x-pos = -12.8 + (to-double(place) * x-module-height)
      val res-to-led-distance = 1.8
      val tp-to-res-distance = 3.0
      val y-module-height = 1.6
      val y-start-height = -1.0 * ((to-double(length(in-pins) - 1) * y-module-height) / 2.0)
      val y-height = (to-double(place) * y-module-height) + y-start-height
      place(test-led.ballast-res) at loc(start-x-pos + res-to-led-distance, y-height, 270.0) on Top
      place(test-led.status-led) at loc(start-x-pos, y-height, 90.0) on Top
      place(test-led.tp-pad) at loc(start-x-pos + res-to-led-distance + tp-to-res-distance, y-height) on Top

; Module to run as a design
val board-width = 45.0
val board-height = 20.0
val board-shape = RoundedRectangle(board-width, board-height, 0.25)
pcb-module usb-c-cable-tester-module :
  pin gnd
  pin power

  net GND (gnd)
  net POWER (power)

  val battery-capacity = 90.0 ;mAh

  ; draw a version number and date on the board silkscreen
  val mydate:String = get-time-string("%Y-%m-%d")
  inst version-label  : ocdb/artwork/board-text/version-silkscreen(append("Version 0.1 ", mydate)) ; make a version label text on silkscreen
  place(version-label) at loc(0.0, height(board-shape) / 2.0 - 1.0) on Bottom ; place the version label text at specified location

  ; setup logo
  inst logo : ocdb/artwork/jitx-logo/logo(10.0)
  place(logo) at loc(10.0, -5.0, 0.0) on Bottom

  ; create USB connectors
  val usb-shift = 8.2
  inst in-usb : ocdb/components/korean-hroparts-elec/TYPE-C-31-M-12/component;
  place(in-usb) at loc((-1.0 * width(board-shape) / 2.0) + usb-shift, 3.0, 270.0) on Top
  inst out-usb : ocdb/components/korean-hroparts-elec/TYPE-C-31-M-12/component;
  place(out-usb) at loc((width(board-shape) / 2.0) - usb-shift, -3.0, 90.0) on Top

  ; create virtual voltage output from out-usb so checks can run
  val voltage = typ(3.0)
  for my-pin in pins(out-usb) do :
    property(my-pin.power-supply-pin) = PowerSupplyPin(voltage, battery-capacity / 1000.0) ; for a 1C battery
    property(my-pin.voltage) = voltage

  ; create coin cell battery
  inst battery : ocdb/components/q-n-j/CR2032-BS-6-1/component(battery-capacity)
  net (POWER battery.power.vdd)
  net (GND battery.power.gnd)
  place(battery) at loc(0.0, 0.0, 270.0) on Bottom

  ; set symbols of some nets
  symbol(GND) = ocdb/utils/symbols/ground-sym

  ; run checks on the design
  check-design(self)

  ; make nets for all of the pins on the usb C that we want to test
  val pin-to-net-name-map = HashTable<Ref, JITXObject>()
  net VBUS-net (out-usb.VBUS)
  pin-to-net-name-map[ref(out-usb.VBUS)] = VBUS-net
  net CC1-net (out-usb.CC1)
  pin-to-net-name-map[ref(out-usb.CC1)] = CC1-net
  net CC2-net (out-usb.CC2)
  pin-to-net-name-map[ref(out-usb.CC2)] = CC2-net
  net DP1-net (out-usb.DP1)
  pin-to-net-name-map[ref(out-usb.DP1)] = DP1-net
  net DN1-net (out-usb.DN1)
  pin-to-net-name-map[ref(out-usb.DN1)] = DN1-net
  net DP2-net (out-usb.DP2)
  pin-to-net-name-map[ref(out-usb.DP2)] = DP2-net
  net DN2-net (out-usb.DN2)
  pin-to-net-name-map[ref(out-usb.DN2)] = DN2-net
  net SBU1-net (out-usb.SBU1)
  pin-to-net-name-map[ref(out-usb.SBU1)] = SBU1-net
  net SBU2-net (out-usb.SBU2)
  pin-to-net-name-map[ref(out-usb.SBU2)] = SBU2-net
  net GND-net (out-usb.GND)
  pin-to-net-name-map[ref(out-usb.GND)] = GND-net
  net SHIELD-net (out-usb.SHIELD)
  pin-to-net-name-map[ref(out-usb.SHIELD)] = SHIELD-net

  ; get all pins of the USB, and order them based on how they physically appear
  val ordered-pins = get-pins-physically-ordered(out-usb)
  val ordered-net-names = 
    for my-pin in ordered-pins seq? :
      if key?(pin-to-net-name-map, ref(my-pin)) :
        One(pin-to-net-name-map[ref(my-pin)])
      else :
        None()

  ; generate an array of test LEDs for each net we just made
  generate-test-leds-array(to-tuple(ordered-net-names), GND)

  ; connect all pins of in-usb to power
  net (POWER pins(in-usb))

  check-design(self)

; Setup board
set-design-directory("CAD") ; set which directly we will save to
set-board(ocdb/utils/defaults/default-board(ocdb/manufacturers/stackups/jlcpcb-jlc2313, board-shape))
set-rules(ocdb/manufacturers/rules/jlcpcb-rules)

; Run checks
run-check-on-design(usb-c-cable-tester-module)

; transform the design so all testpoints are labelled
set-main-module(usb-c-cable-tester-module) ; Treat the provided module as a design, and compile it.

; Export to CAD
export-design() ; this will overwrite previous export, only run this if you don't need your previous Kicad/Altium layout work!

; View the results
view-board()
view-schematic()
view-design-explorer()