; ====================
; A USB-C cable tester
; ====================

; declare our package name and import dependencies
#use-added-syntax(jitx)
defpackage main : 
  import core
  import collections
  import jitx
  import jitx/commands
  import utils/time
  import ocdb/utils/checks
  import ocdb/utils/generic-components
  import ocdb/utils/box-symbol
  import ocdb/utils/generator-utils
  import helpers
  import ocdb/components/q-n-j/CR2032-BS-6-1
  import ocdb/utils/property-structs
  import components/LED-maker-ROYGB

; define parameters of the board
val board-width = 65.0
val board-height = 45.0
val board-shape = RoundedRectangle(board-width, board-height, 0.25)

; return a list of colors of the rainbow, sliding smoothly through color space
defn generate-rainbow (num-colors:Int) -> Seq:
  ; val colors:Tuple<String> = [ "red", "orange", "yellow", "green", "blue", "indigo", "violet" ]
  val generated-colors = 
    for i in 0 to num-colors seq :
      components/LED-maker-ROYGB/LED-COLORS(i % components/LED-maker-ROYGB/LED-COLORS-length)
  generated-colors

; place a testpad
defn testpad-strap (tp:JITXObject, tp-name:String, diameter:Double) -> JITXObject:
  inside pcb-module :
    public inst tp-pad : gen-testpad(diameter)
    net (tp-pad.p tp)
    ; name the test point
    value-label(tp-pad) = Text(tp-name, 1.0, W, loc(1.5, 0.0))
    reference-designator(tp-pad) = tp-name
    tp-pad

; generate a test LED
pcb-module generate-test-led (voltage:Toleranced, net-name:String, color:components/LED-maker-ROYGB/LED-COLORS) :
  pin in
  pin out

  net IN (in)

  ; add a testpoint for this pin
  val test-pad = testpad-strap(IN, net-name, 2.0)
  ; generate LED
  public inst status-led : components/LED-maker-ROYGB/module(color, voltage)
  net (status-led.in in)
  net (status-led.out out)
  self

; take a Tuple of pins we want to add status LEDs to, and the GND pin. Add status LEDs and test pins to each of the input pins.
defn generate-test-leds-array (in-pins:Tuple<JITXObject>, gnd-pin:JITXObject, voltage:Toleranced) :
  inside pcb-module :
    val colors:Seq<LED-COLORS> = generate-rainbow(length(in-pins))
    for (in-pin in in-pins, color in colors, place in 0 to false) do :
      ; create test LED and connect it
      inst test-led : generate-test-led(voltage, to-string(ref(in-pin)), color)
      net (in-pin test-led.in)
      net (gnd-pin test-led.out)

      ; place components
      val res-to-led-distance = 2.2
      val tp-to-res-distance = 3.0
      val x-module-height = 1.9
      val x-start = (((to-double(length(in-pins))) * x-module-height) / -2.0) - 2.5 ; subtract an extra bit to make up for the size of the entire test-led submodule
      val x-pos = x-start + (to-double(place) * x-module-height)
      val y-module-height = 1.6
      val y-start-height = -1.0 * ((to-double(length(in-pins) - 1) * y-module-height) / 2.0)
      val y-height = (to-double(place) * y-module-height) + y-start-height
      place(test-led.status-led.led) at loc(x-pos, y-height, 270.0) on Top
      place(test-led.status-led.ballast-res) at loc(x-pos + res-to-led-distance, y-height, 270.0) on Top
      place(test-led.tp-pad) at loc(x-pos + res-to-led-distance + tp-to-res-distance, y-height) on Top

pcb-module hookedup-usb-c-cable-tester-module :
  inst my-usb-tester : usb-c-cable-tester-module

pcb-module usb-c-cable-tester-module :
  ; define pins to expose from our module
  pin gnd
  pin power

  ; define nets
  net GND (gnd)
  net POWER (power)

  ; specify the capacity of the lithium coin cell battery that we use
  val battery-capacity = 90.0 ;mAh

  ; draw a version number and date on the board silkscreen
  val mydate:String = get-time-string("%Y-%m-%d")
  inst version-label  : ocdb/artwork/board-text/version-silkscreen(append("Version 0.1 ", mydate)) ; make a version label text on silkscreen
  place(version-label) at loc(0.0, height(board-shape) / 2.0 - 1.0) on Bottom ; place the version label text at specified location

  ; setup logo
  inst logo : ocdb/artwork/jitx-logo/logo(10.0)
  place(logo) at loc(10.0, -5.0, 0.0) on Bottom

  ; create USB connectors
  val usb-shift = 8.2
  public inst in-usb : ocdb/components/korean-hroparts-elec/TYPE-C-31-M-12/component
  place(in-usb) at loc((-1.0 * width(board-shape) / 2.0) + usb-shift, 3.0, 270.0) on Top
  public inst out-usb : ocdb/components/korean-hroparts-elec/TYPE-C-31-M-12/component;
  place(out-usb) at loc((width(board-shape) / 2.0) - usb-shift, -3.0, 90.0) on Top

  ; create 2 coin cell batteries in series
  inst battery-high : ocdb/components/q-n-j/CR2032-BS-6-1/component(battery-capacity)
  net (POWER battery-high.power.vdd)
  inst battery-low: ocdb/components/q-n-j/CR2032-BS-6-1/component(battery-capacity)
  net (GND battery-low.power.gnd)
  net (battery-high.power.gnd battery-low.power.vdd)
  val battery-y = board-height / 4.0
  place(battery-high) at loc(0.0, battery-y, 90.0) on Bottom
  place(battery-low) at loc(0.0, -1.0 * battery-y, 270.0) on Bottom
  val total-board-voltage = property(battery-high.power.vdd.voltage) + property(battery-low.power.vdd.voltage)

  ; create virtual voltage output from out-usb so checks can run
  for my-pin in pins(out-usb) do :
    property(my-pin.power-supply-pin) = PowerSupplyPin(total-board-voltage, battery-capacity / 1000.0) ; for a 1C battery
    property(my-pin.voltage) = total-board-voltage

  ; set symbols of some nets
  symbol(GND) = ocdb/utils/symbols/ground-sym

  ; run checks on the design
  check-design(self)

  ; make nets for all of the pins on the usb C that we want to test
  val pin-to-net-name-map = HashTable<Ref, JITXObject>() ; first make a HashTable (like a dictionary) that maps the pins we want to test to the nets that they are connected to
  net VBUS-net (out-usb.VBUS) ; for each pin of the USB, we make a net
  pin-to-net-name-map[ref(out-usb.VBUS)] = VBUS-net ; save the mapping from the reference of the pin to the net
  net CC1-net (out-usb.CC1)
  pin-to-net-name-map[ref(out-usb.CC1)] = CC1-net
  net CC2-net (out-usb.CC2)
  pin-to-net-name-map[ref(out-usb.CC2)] = CC2-net
  net DP1-net (out-usb.DP1)
  pin-to-net-name-map[ref(out-usb.DP1)] = DP1-net
  net DN1-net (out-usb.DN1)
  pin-to-net-name-map[ref(out-usb.DN1)] = DN1-net
  net DP2-net (out-usb.DP2)
  pin-to-net-name-map[ref(out-usb.DP2)] = DP2-net
  net DN2-net (out-usb.DN2)
  pin-to-net-name-map[ref(out-usb.DN2)] = DN2-net
  net SBU1-net (out-usb.SBU1)
  pin-to-net-name-map[ref(out-usb.SBU1)] = SBU1-net
  net SBU2-net (out-usb.SBU2)
  pin-to-net-name-map[ref(out-usb.SBU2)] = SBU2-net
  net GND-net (out-usb.GND)
  pin-to-net-name-map[ref(out-usb.GND)] = GND-net
  net SHIELD-net (out-usb.SHIELD)
  pin-to-net-name-map[ref(out-usb.SHIELD)] = SHIELD-net

  ; get all pins of the USB, and order them based on how they physically appear
  val ordered-pins = get-pins-physically-ordered(out-usb)
  ; convert from the ordered pins list to a list of nets those pins are connected to
  val ordered-net-names = 
    for my-pin in ordered-pins seq? :
      if key?(pin-to-net-name-map, ref(my-pin)) :
        One(pin-to-net-name-map[ref(my-pin)])
      else :
        None()

  ; generate an array of test LEDs for each net we just made
  generate-test-leds-array(to-tuple(ordered-net-names), GND, total-board-voltage)

  ; connect all pins of in-usb to power
  net (POWER pins(in-usb))

  ; add mounting holes to corners of the board
  add-mounting-holes(board-shape, "M2", [])

  ; run checks on this module
  check-design(self)

; Setup board
set-design-directory("CAD") ; set which directly we will save to
set-board(ocdb/utils/defaults/default-board(jlcpcb-jlc-2layer, board-shape))
set-rules(ocdb/manufacturers/rules/jlcpcb-rules)

; Run checks
run-check-on-design(usb-c-cable-tester-module)

set-main-module(usb-c-cable-tester-module) ; Treat the provided module as a design, and compile it.

; Export to CAD
; export-design() ; this will overwrite previous export, only run this if you don't need your previous Kicad/Altium layout work!

; View the results
view-board()
view-schematic()
view-design-explorer()