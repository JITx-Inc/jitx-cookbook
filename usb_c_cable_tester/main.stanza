; ====================
; A USB-C cable tester
; The top level module of our final design begins on the line `pcb-module usb-c-cable-tester-module`. Start there if you're reading this recipe for the first time.
; ====================

; declare our package name and import dependencies
#use-added-syntax(jitx)
defpackage main : 
  import core
  import collections
  import jitx
  import jitx/commands
  import utils/time
  import ocdb/utils/checks
  import ocdb/utils/generic-components
  import ocdb/utils/generator-utils
  import helpers
  ; import components/LED-maker-ROYGB/LED-COLORS
  import components/LED-maker-ROYGB

; define parameters of the board
val board-width = 65.0
val board-height = 45.0
val board-shape = RoundedRectangle(board-width, board-height, 0.25)

; return a list of colors of the rainbow, sliding smoothly through color space
defn generate-rainbow (num-colors:Int) -> Seq:
  val color-subset = [RED, YELLOW, ORANGE]
  val generated-colors = 
    for i in 0 to num-colors seq :
      ; use the LED-COLORS enum, defined in the LED-maker-ROYGB component, looping through it to use all the colors
      LED-COLORS(i % length(color-subset))
  generated-colors

; place a testpad
defn my-testpoint-strap (tp:JITXObject, tp-name:String, diameter:Double) -> JITXObject:
  inside pcb-module :
    public inst tp-pad : gen-testpad(diameter)
    net (tp-pad.p tp)
    ; name the test point
    value-label(tp-pad) = Text(tp-name, 1.0, W, loc(1.5, 0.0))
    ; val my-label = Text(tp-name, 1.0, W, loc(1.5, 0.0))
    inst my-label : ocdb/artwork/board-text/text(tp-name, 1.0, 0.0)
    place(my-label) at loc(1.0, -0.4, 0.0) on Top (relative-to tp-pad)
    tp-pad

; generate an LED with tuned ballast resistor, connect a testpad, and place all the components relative to each other in a linear fashion
pcb-module generate-test-led (voltage:Toleranced, net-name:String, color:components/LED-maker-ROYGB/LED-COLORS) :
  pin in
  pin out

  net IN (in)

  ; add a testpoint for this pin
  val test-pad = my-testpoint-strap(IN, net-name, 2.0) ; in current versions of OCDB, we can directly call `testpoint-strap` function

  ; generate LED of certain color with a ballast resistor tuned for that color and LED type
  inst status-led : components/LED-maker-ROYGB/module(color, voltage)
  net (status-led.in in)
  net (status-led.out out)

  ; place the test-LED module and the testpoint in a linear array in the layout
  val led-module-to-tp-distance = 8.2
  place(status-led) at loc(0.0, 0.0, 0.0) on Top
  place(test-pad) at loc(led-module-to-tp-distance, 0.0) on Top
  self

; take a Tuple of pins we want to add status LEDs to, and the GND pin. Add status LEDs and test pins to each of the input pins.
defn generate-test-leds-array (in-pins:Tuple<Net>, gnd-pin:JITXObject, voltage:Toleranced) :
  inside pcb-module :
    val colors:Seq<components/LED-maker-ROYGB/LED-COLORS> = generate-rainbow(length(in-pins))
    for (in-pin in in-pins, color in colors, place in 0 to false) do :
      ; create test LED and connect it
      inst test-led : generate-test-led(voltage, to-string(ref(in-pin)), color)
      net (in-pin test-led.in)
      net (gnd-pin test-led.out)

      ; place components
      val x-module-height = 1.9
      val x-start = (((to-double(length(in-pins))) * x-module-height) / -2.0) - 2.0 ; subtract an extra bit to make up for the size of the entire test-led submodule
      val x-pos = x-start + (to-double(place) * x-module-height)
      val y-module-height = 1.6
      val y-start-height = (-1.0 * ((to-double(length(in-pins) - 1) * y-module-height) / 2.0)) - (board-height / 14.0)
      val y-pos = (to-double(place) * y-module-height) + y-start-height
      place(test-led) at loc(x-pos, y-pos) on Top

; a rig that plugs a USB cable into both connectors on the main usb cable testing board - this is created to allow us to run checks
public pcb-module test-rig :
  inst design-under-test : usb-c-cable-tester-module
  inst usb-c-cable : usb-c-cable-module
  net IN (design-under-test.in-usb.usb-c-pinout usb-c-cable.in-usb-bundle)
  net OUT (design-under-test.out-usb.usb-c-pinout usb-c-cable.out-usb-bundle)
  check-design(self)

; a component that models a usb cable
public pcb-module usb-c-cable-module:
  port in-usb-bundle : ocdb/components/xkb/U263-241N-4BQC11-1/usb-c-bundle
  port out-usb-bundle : ocdb/components/xkb/U263-241N-4BQC11-1/usb-c-bundle
  net (in-usb-bundle out-usb-bundle)

pcb-module usb-c-cable-tester-module :
  ; define pins to expose from our module
  pin gnd
  pin power

  ; define nets
  net GND (gnd)
  net POWER (power)

  ; draw a version number and date on the board silkscreen
  val mydate:String = get-time-string("%Y-%m-%d")
  inst version-label  : ocdb/artwork/board-text/version-silkscreen(to-string("USB-C Cable Tester | Version 0.1 %_" % [get-time-string("%Y-%m-%d")])) ; make a version label text on silkscreen
  place(version-label) at loc(0.0, height(board-shape) / 2.0 - 1.0) on Bottom ; place the version label text at specified location

  ; setup logo
  inst logo : ocdb/artwork/jitx-logo/logo(10.0)
  place(logo) at loc(10.0, -5.0, 0.0) on Bottom

  ; create a coin cell battery
  val battery-capacity = 90.0 ;mAh
  inst battery : ocdb/components/q-n-j/CR2032-BS-6-1/component(battery-capacity)
  net (POWER battery.power.vdd)
  net (GND battery.power.gnd)
  val battery-y = board-height / 5.0
  val battery-x = board-width / -5.0
  place(battery) at loc(battery-x, battery-y, 90.0) on Top

  ; create USB connectors
  val usb-x-shift = 8.0
  val usb-y-shift = -10.0
  public inst in-usb : ocdb/components/xkb/U263-241N-4BQC11-1/component
  place(in-usb) at loc((-1.0 * width(board-shape) / 2.0) + usb-x-shift, usb-y-shift, 0.0) on Top
  public inst out-usb : ocdb/components/xkb/U263-241N-4BQC11-1/component
  place(out-usb) at loc((width(board-shape) / 2.0) - usb-x-shift, usb-y-shift, 0.0) on Top

  ; make nets for all of the pins on the usb C that we want to test
  net VBUS (out-usb.usb-c-pinout.VBUS) ; for each pin of the USB, we make a net
  net GND-usb (out-usb.usb-c-pinout.GND)
  net SHIELD (out-usb.usb-c-pinout.shield)
  net SBU2 (out-usb.usb-c-pinout.SBU2)
  net SBU1 (out-usb.usb-c-pinout.SBU1)
  net DN2 (out-usb.usb-c-pinout.DN2)
  net DP2 (out-usb.usb-c-pinout.DP2)
  net DN1 (out-usb.usb-c-pinout.DN1)
  net DP1 (out-usb.usb-c-pinout.DP1)
  net CC2 (out-usb.usb-c-pinout.CC2)
  net CC1 (out-usb.usb-c-pinout.CC1)
  net SSTXP1 (out-usb.usb-c-pinout.SSTXP1)
  net SSTXN1 (out-usb.usb-c-pinout.SSTXN1)
  net SSRXP1 (out-usb.usb-c-pinout.SSRXP1)
  net SSRXN1 (out-usb.usb-c-pinout.SSRXN1)
  net SSTXP2 (out-usb.usb-c-pinout.SSTXP2)
  net SSTXN2 (out-usb.usb-c-pinout.SSTXN2)
  net SSRXP2 (out-usb.usb-c-pinout.SSRXP2)
  net SSRXN2 (out-usb.usb-c-pinout.SSRXN2)

  ; get all pins of the USB, and order them based on how they physically appear
  val ordered-pins = get-pins-physically-ordered(out-usb)

  ; convert from ordered list of pins to ordered list of nets
  val ordered-nets = map(get-named-net{self, _}, ordered-pins)

  ; generate an array of test LEDs for each net we just made
  generate-test-leds-array(ordered-nets, GND, property(battery.power.vdd.voltage))

  ; connect all pins of in-usb to power
  net (POWER pins(in-usb))

  ; set symbols of some nets
  symbol(GND) = ocdb/utils/symbols/ground-sym

  ; add mounting holes to corners of the board
  add-mounting-holes(board-shape, "M2", [])

; Setup board
set-design-directory("CAD") ; set which directly we will save to
set-board(ocdb/utils/defaults/default-board(jlcpcb-jlc-2layer, board-shape))
set-rules(ocdb/manufacturers/rules/jlcpcb-rules)

; Run checks
run-check-on-design(test-rig)

set-main-module(usb-c-cable-tester-module) ; Treat the provided module as a design, and compile it.

; Export to CAD
export-design() ; this will overwrite previous export, only run this if you don't need your previous Kicad/Altium layout work!
; update-design()

; View the results
view-board()
view-schematic()
view-design-explorer()