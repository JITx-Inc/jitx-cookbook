; make LEDs of different colors with the same brightness -> module that accepts color, brightness, and voltage, and create an LED with ballast resistor
#use-added-syntax(jitx)
defpackage components/LED-maker-ROYGB:
  import core
  import collections
  import jitx
  import jitx/commands
  import ocdb/utils/defaults
  import ocdb/utils/landpatterns
  import ocdb/utils/box-symbol
  import ocdb/utils/bundles
  import ocdb/utils/property-structs
  import ocdb/utils/generic-components
  import ocdb/utils/generator-utils
  import ocdb/utils/symbols
  import ocdb/utils/db-parts

pcb-landpattern lp-led-maker :
  make-ipc-two-pin-landpattern("0603")

public pcb-enum components/LED-maker-ROYGB/LED-COLORS :
  RED
  ORANGE
  YELLOW
  GREEN
  BLUE
 
public pcb-component led-component (color:LED-COLORS) :
  name = "LED-maker-ROYGBIV"
  description = "Everlight Elec 0603 various color SMD LEDs"
  manufacturer = "Everlight Elec"
  reference-prefix = "LED"
  property(self.package) = "0603"

  ; properties shared by all LEDs
  property(self.max-current) = 25.0e-3
  property(self.rated-temperature) = 85.0

  ; properties different among LEDs
  switch(color) :
    RED:
      mpn = "19-21/R6C-FP1Q2L/3T"
      property(self.lcsc) = "C93128"
      property(self.datasheet) = "https://datasheet.lcsc.com/lcsc/1810010118_Everlight-Elec-19-21-R6C-FP1Q2L-3T_C93128.pdf"
      property(self.li-minimum) = 45.0e-3
      property(self.li-maximum) = 112.0e-3
      property(self.vf-minimum) = 1.7
      property(self.vf-maximum) = 2.3
    ORANGE:
      mpn = "19-217UYOC/S3077/TR8"
      property(self.lcsc) = "C264474"
      property(self.datasheet) = "https://datasheet.lcsc.com/lcsc/1912111437_Everlight-Elec-19-217UYOC-S3077-TR8_C264474.pdf"
      property(self.li-minimum) = 28.0e-3
      property(self.li-maximum) = 72.0e-3
      property(self.vf-minimum) = 1.7
      property(self.vf-maximum) = 2.4
    YELLOW:
      mpn = "19-21/Y2C-CN1P2B/3T"
      property(self.lcsc) = "C131265"
      property(self.datasheet) = "https://datasheet.lcsc.com/lcsc/1811141628_Everlight-Elec-19-21-Y2C-CN1P2B-3T_C131265.pdf"
      property(self.li-minimum) = 28.5e-3
      property(self.li-maximum) = 72.0e-3
      property(self.vf-minimum) = 1.75
      property(self.vf-maximum) = 2.35
    GREEN:
      mpn = "19-217/GHC-YN1P2B18X/3T"
      property(self.lcsc) = "C2980184"
      property(self.datasheet) = "https://datasheet.lcsc.com/lcsc/2202101201_Everlight-Elec-19-21-GHC-YR1S2-3T_C2973113.pdf"
      property(self.li-minimum) = 28.5e-3
      property(self.li-maximum) = 72.0e-3
      property(self.vf-minimum) = 2.7
      property(self.vf-maximum) = 3.7
    BLUE:
      mpn = "19-213/BHC-AP2Q2E/3T"
      property(self.lcsc) = "C474027"
      property(self.datasheet) = "https://datasheet.lcsc.com/lcsc/1912251011_Everlight-Elec-19-213-BHC-AP2Q2E-3T_C474027.pdf"
      property(self.li-minimum) = 57.0e-3
      property(self.li-maximum) = 112.0e-3
      property(self.vf-minimum) = 2.75
      property(self.vf-maximum) = 3.65

  pin-properties :
    [pin:Ref    | pads:Int ... | side:Dir ]
    [a          | 1            | Up       ]
    [c          | 2            | Down     ]

  assign-symbol(diode-sym(DiodeLED))
  assign-landpattern(lp-led-maker)

  supports power:
    power.vdd => self.a
    power.gnd => self.c

defn percent-to-li (percent:Double, min-li:Double, max-li:Double) -> Double :
  ((percent * (min-li - max-li)) + min-li)


defn compute-ballast-resistor (led:JITXObject, voltage:Toleranced, brightness:Double) -> Double : ; led is an led-component, brightness is in candellas
  ; nominal luminous intensity of this LED
  val nli = ((property(led.li-maximum) + property(led.li-minimum)) / 2.0) as Double
  val vf = ((property(led.vf-maximum) + property(led.vf-minimum)) / 2.0) as Double

  ; map luminous intensity to current
  ; Datasheet gives data in tables, so use piecewise linear model to find value
  val my-pwl = PWL([
      [0.02 * nli, 1.0e-3] 
      [0.06 * nli, 2.0e-3]
      [0.5 * nli, 10.0e-3]
      [1.0 * nli, 20.0e-3]
    ])
  val computed-current = my-pwl[brightness]

  ; get the required resistance, given the input voltage and the desired current
  val computed-resistance = (voltage - typ(vf)) / typ(computed-current)
  ; turn the resistor into the closest standard value resistor
  val standard-computed-resistance = closest-std-val(typ-value(computed-resistance), 5.0)

  standard-computed-resistance
 
; the LED and ballast resistor module
public pcb-module module (color:LED-COLORS, voltage-in:Toleranced) :
  pin in
  pin out

  ; using the component definition from above:
  public inst led : components/LED-maker-ROYGB/led-component(color)

  ; create ballast resistor
  val brightness = 50.0e-3 ; candella
  val ballast-resistance = compute-ballast-resistor(led, voltage-in, brightness);
  public inst ballast-res : gen-res-cmp(ballast-resistance, "0402")

  ; hook up LEDs, resistors to input and output
  net (in ballast-res.p[1]) ; input power
  net (ballast-res.p[2] led.a) ; connect one terminal of the resistor to anode of LED
  net (led.c out) ; connect led to output

  ; specify our input voltage range
  property(in.power-supply-pin) = PowerSupplyPin(voltage-in, property(led.max-current))
  property(in.voltage) = voltage-in