; Generated by JITX 1.1.2-rc.2
#use-added-syntax(jitx)
defpackage hacking_conference_badge/helpers :
  import core
  import collections
  import jitx
  import jitx/commands

; ====================================
; Compile the design, view the results
; ====================================
; ==========================================
; Configure the design, then run or check it
; ==========================================
public defn run-design (name:String, board-shape:Shape, circuit:Instantiable, run-checks?:True|False) :
  ; set-paper(ANSI-A5)
  set-current-design(name)
  set-board(ocdb/utils/defaults/default-board(ocdb/manufacturers/stackups/jlcpcb-jlc2313-6layer, board-shape))
  set-rules(ocdb/manufacturers/rules/jlcpcb-rules)

  var main-module = circuit

  if run-checks? :
    main-module = ocdb/utils/generator-utils/run-final-passes(circuit) ; Analyze design with a pass
  
  set-main-module(main-module) ; Treat the provided module as a design, and compile it.
  set-use-layout-groups()
  if run-checks? :
    run-checks("checks.txt")
    view-design-explorer()
    export-design()
  else:  
    view-board()
    view-schematic()
    view-design-explorer()
; ====================
; Export design to CAD
; ====================
val export-field-mapping = [
  "LCSC" => "LCSC"
  "lcsc" => "LCSC"
  "vendor_part_numbers.lcsc" => "LCSC"
]
public defn export-design () :
  set-paper(ANSI-A4)
  set-export-backend(`kicad)
  export-cad(export-field-mapping)

; ===================================
; Update CAD, keeping layout progress
; ===================================
defn update-design () :
  set-export-board?(false)
  export-design()

; =================
; Export BOM to tsv
; =================
defn export-bill-of-materials () :
  set-bom-vendors(ocdb/utils/design-vars/APPROVED-DISTRIBUTOR-LIST)
  set-bom-design-quantity(ocdb/utils/design-vars/DESIGN-QUANTITY)
  export-bom()
