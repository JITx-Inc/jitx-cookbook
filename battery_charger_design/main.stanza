; ====================
; A battery manager recipe designed with JITX.
; ====================

; declare our package name and import dependencies
#use-added-syntax(jitx)
defpackage main : 
  import core
  import jitx
  import jitx/commands
  import utils/time
  import ocdb/utils/checks
  import ocdb/utils/generic-components
  import ocdb/utils/box-symbol
  import ocdb/utils/generator-utils
  import helpers

; Module to run as a design
val board-shape = RoundedRectangle(30.0, 18.5, 0.25)
pcb-module battery-manager-module :
  pin gnd

  ; setup the ground network
  net GND (gnd)
  property(GND.voltage) = typ(0.0)

  ; draw a version number and date on the board silkscreen
  val mydate:String = get-time-string("%Y-%m-%d")
  inst version-label  : ocdb/artwork/board-text/version-silkscreen(string-join("Version 0.1 ", mydate)) ; make a version label text on silkscreen
  place(version-label) at loc(0.0, height(board-shape) / 2.0 - 1.0) on Bottom ; place the version label text at specified location

  inst logo : ocdb/artwork/jitx-logo/logo(10.0)
  place(logo) at loc(10.0, -5.0, 0.0) on Bottom

  ; create the battery manager IC, connect it
  inst battery-manager : components/BQ24078RGTR/module
  net BMOUT (battery-manager.vout)
  net (battery-manager.gnd GND)

  ; create battery JST connector, connect it
  inst battery-connector : components/PH2_0-2PWB/component
  net (battery-connector.gnd gnd)
  net (battery-connector.power battery-manager.bat+)

  ; create the battery itself
  inst battery : components/LithiumBattery/component(typ(3.7), 500.0) ; (voltage, current)
  net VBAT (battery.POWER battery-manager.bat+)
  net (GND battery.GND)

  ; create an input voltage from the USB cable
  inst usb-cable : components/USBCable/component
  net (usb-cable.POWER battery-manager.vin)
  net (GND usb-cable.GND)

  ; create switch and pull up, connect them. Switch pulls SYSOFF down for normal operation, high to disconnect battery
  inst switch-phy : components/MK-12C02-G025/component
  net (GND switch-phy.left switch-phy.gnd) ; switch turns battery-manager on
  net (switch-phy.center battery-manager.sysoff)
  val sys-r = res-strap(switch-phy.right, VBAT, 100.0e3) ; pull-up turns battery monitor off

  ; create USB connector and connect it
  inst usb : usb2-on-a-usb-c-connector(ocdb/components/korean-hroparts-elec/TYPE-C-31-M-12/module(SinkDefault))
  net (usb.usb-2.vbus.gnd gnd)
  net VBUS (battery-manager.vin usb.usb-2.vbus.vdd)

  ; create the LDO and connect it
  inst ldo : components/AP2125K-2_8TRG1/module
  net (BMOUT ldo.vin ldo.ce)
  net (ldo.gnd GND)
  net P2V8 (ldo.vout)
  val ldo-pulldown = res-strap(ldo.ce GND, 100.0e3) ; pull-down on the CE pin disables the LDO when the battery manager is not outputting voltage

  ; create voltage output JST connector, connect it
  inst vout-connector : components/PH2_0-2PWB/component
  net (vout-connector.gnd gnd)
  net (vout-connector.power ldo.vout)

  ; create test pads to test/solder LDO vout
  add-testpoint([vout-connector.power], Testpoint-SMDPad)
  add-testpoint([vout-connector.gnd], Testpoint-SMDPad)
  
  ; set symbols of some nets
  symbol(GND) = ocdb/utils/symbols/ground-sym
  symbol(VBAT) = ocdb/utils/symbols/supply-sym
  symbol(VBUS) = ocdb/utils/symbols/supply-sym
  symbol(BMOUT) = ocdb/utils/symbols/supply-sym
  symbol(P2V8) = ocdb/utils/symbols/supply-sym

  ; group some components in the schematic and layout to make it easier to read
  schematic-group([sys-r switch-phy battery-connector]) = schematic-group(battery-manager)
  layout-group([sys-r switch-phy battery-connector]) = layout-group(battery-manager)

  schematic-group([ldo ldo-pulldown]) = schematic-group(ldo)
  layout-group([ldo ldo-pulldown]) = layout-group(ldo)

  check-design(self)

; Setup board
set-design-directory("CAD") ; set which directly we will save to
set-board(ocdb/utils/defaults/default-board(ocdb/manufacturers/stackups/jlcpcb-jlc2313, board-shape))
set-rules(ocdb/manufacturers/rules/jlcpcb-rules)

; Run checks
run-check-on-design(battery-manager-module)

; Run the code
set-main-module(battery-manager-module) ; Treat the provided module as a design, and compile it.

; View the results
view-board()
view-schematic()
view-design-explorer()