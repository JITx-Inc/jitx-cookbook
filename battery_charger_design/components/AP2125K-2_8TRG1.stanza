; A 2.8V LDO voltage regulator IC, AP2125K
#use-added-syntax(jitx)
defpackage components/AP2125K-2_8TRG1 :
  import core
  import collections
  import jitx
  import jitx/commands
  import ocdb/utils/box-symbol
  import ocdb/utils/property-structs
  import ocdb/utils/generic-components
  import ocdb/utils/landpatterns

; Check to make sure voltage is not in a given range
pcb-check ap2125k-voltage-not-in-range-check (p:JITXObject, value:Toleranced) :
  if has-property?(p.voltage) :
    val t = property(p.voltage)
    #CHECK(
      condition =            not in-range?(value, t),
      name =                 "AP2125 Logic Check",
      description =          "Check the AP2125",
      category =             "Component checks"
      subcheck-description = "Check the logic voltage level of a digital IO on the AP2125"
      pass-message =         "Voltage %_ is correctly outside of %_" % [t value]
      fail-message =         "Voltage %_ to %_ is within the range of %_ to %_" % [min-value(t) max-value(t) min-value(value) max-value(value)]
      locators =             []
      )    

; Check to make sure voltage is within a given range
pcb-check ap2125k-voltage-in-range-check (p:JITXObject, value:Toleranced) :
  if has-property?(p.voltage) :
    val t = property(p.voltage)
    #CHECK(
      condition =            in-range?(value, t),
      name =                 "AP2125 Logic Check",
      description =          "Check the AP2125",
      category =             "Component checks"
      subcheck-description = "Check the logic voltage level of a digital IO on the AP2125"
      pass-message =         "Voltage %_ is correctly inside of %_" % [t value]
      fail-message =         "Voltage %_ to %_ is not within the range of %_ to %_" % [min-value(t) max-value(t) min-value(value) max-value(value)]
      locators =             []
      )    

public pcb-landpattern SOT-23-5_L30-W16-P095-LS28-BL :
  make-sot23-5()

public pcb-component component :
  description = "AP2125K-2_8TRG1"
  mpn = "AP2125K-2.8TRG1"
  pin-properties :
    [pin:Ref | pads:Ref ... | side:Dir ]
    [VIN | p[1] | Left ]
    [GND | p[2] | Left ]
    [CE | p[3] | Left ]
    [NC | p[4] | Right ]
    [VOUT | p[5] | Right ]

  ; assign symbol 
  make-box-symbol()

  ; use the built-in SOT-23-5 landpattern
  assign-landpattern(SOT95P280X145-5N)

  ; set the logic voltage levels
  val vih = 1.5
  val vil = 0.4
  property(self.dropout-voltage-max) = 300.0e-3
  val vout = min-typ-max(2.744 2.8 2.856)
  val vin = min-max(2.8 + property(self.dropout-voltage-max), 6.0)

  ; specify that this pin is input power
  property(self.VIN.power-pin) = PowerPin(vin)

  ; specify that this pin is a logic level pin that operates with these voltage logic constraints
  property(self.CE.digital-input) = DigitalInput(typ(vil), typ(vih), self.VIN, self.GND, 1.0e-6)

  ; set a helpful property with the LCSC reference number
  property(self.LCSC) = "C176953"

  ; logic to set the output voltage of the LDO based on the pin input parameters
  eval-when has-property?(self.CE.voltage) and has-property?(self.VIN.voltage) :
    val ce-voltage = property(self.CE.voltage)
    val input-voltage = property(self.VIN.voltage)
    val outv = 
      if typ-value(ce-voltage) < vil :
        typ(0.0)
      else if typ-value(ce-voltage) > vih:
        vout
      else :
        fatal("CE voltage is in between Vil and Vih in AP2125K")
    property(self.VOUT.power-supply-pin) = PowerSupplyPin(outv, 0.36)

  ; run checks to ensure that the voltage ranges are correct for logic
  check ap2125k-voltage-not-in-range-check(self.CE, min-max(vil, vih))
  check ap2125k-voltage-in-range-check(self.VIN, vin)

public pcb-module module : 
  pin vin
  pin vout
  pin gnd
  pin ce
  public inst ps : components/AP2125K-2_8TRG1/component

  ; create the bypass capacitors
  ocdb/utils/generic-components/bypass-cap-strap(ps.VIN, gnd, 1.0e-6)
  ocdb/utils/generic-components/bypass-cap-strap(ps.VOUT, gnd, 1.0e-6)

  ; connects pins to nets
  net (vin, ps.VIN)
  net (ps.VOUT vout)
  net (gnd, ps.GND)
  net (ce, ps.CE)

  ; group the schematic for easier parsing
  schematic-group(self) = AP2112